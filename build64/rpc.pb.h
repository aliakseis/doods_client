// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/empty.pb.h>
#include "github.com/gogo/protobuf/gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto;
namespace odrpc {
class DetectRequest;
class DetectRequestDefaultTypeInternal;
extern DetectRequestDefaultTypeInternal _DetectRequest_default_instance_;
class DetectRequest_DetectEntry_DoNotUse;
class DetectRequest_DetectEntry_DoNotUseDefaultTypeInternal;
extern DetectRequest_DetectEntry_DoNotUseDefaultTypeInternal _DetectRequest_DetectEntry_DoNotUse_default_instance_;
class DetectResponse;
class DetectResponseDefaultTypeInternal;
extern DetectResponseDefaultTypeInternal _DetectResponse_default_instance_;
class Detection;
class DetectionDefaultTypeInternal;
extern DetectionDefaultTypeInternal _Detection_default_instance_;
class Detector;
class DetectorDefaultTypeInternal;
extern DetectorDefaultTypeInternal _Detector_default_instance_;
class GetDetectorsResponse;
class GetDetectorsResponseDefaultTypeInternal;
extern GetDetectorsResponseDefaultTypeInternal _GetDetectorsResponse_default_instance_;
}  // namespace odrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::odrpc::DetectRequest* Arena::CreateMaybeMessage<::odrpc::DetectRequest>(Arena*);
template<> ::odrpc::DetectRequest_DetectEntry_DoNotUse* Arena::CreateMaybeMessage<::odrpc::DetectRequest_DetectEntry_DoNotUse>(Arena*);
template<> ::odrpc::DetectResponse* Arena::CreateMaybeMessage<::odrpc::DetectResponse>(Arena*);
template<> ::odrpc::Detection* Arena::CreateMaybeMessage<::odrpc::Detection>(Arena*);
template<> ::odrpc::Detector* Arena::CreateMaybeMessage<::odrpc::Detector>(Arena*);
template<> ::odrpc::GetDetectorsResponse* Arena::CreateMaybeMessage<::odrpc::GetDetectorsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace odrpc {

// ===================================================================

class GetDetectorsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:odrpc.GetDetectorsResponse) */ {
 public:
  GetDetectorsResponse();
  virtual ~GetDetectorsResponse();

  GetDetectorsResponse(const GetDetectorsResponse& from);
  GetDetectorsResponse(GetDetectorsResponse&& from) noexcept
    : GetDetectorsResponse() {
    *this = ::std::move(from);
  }

  inline GetDetectorsResponse& operator=(const GetDetectorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDetectorsResponse& operator=(GetDetectorsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDetectorsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDetectorsResponse* internal_default_instance() {
    return reinterpret_cast<const GetDetectorsResponse*>(
               &_GetDetectorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetDetectorsResponse* other);
  friend void swap(GetDetectorsResponse& a, GetDetectorsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDetectorsResponse* New() const final {
    return CreateMaybeMessage<GetDetectorsResponse>(nullptr);
  }

  GetDetectorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDetectorsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDetectorsResponse& from);
  void MergeFrom(const GetDetectorsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDetectorsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "odrpc.GetDetectorsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .odrpc.Detector detectors = 1;
  int detectors_size() const;
  void clear_detectors();
  static const int kDetectorsFieldNumber = 1;
  ::odrpc::Detector* mutable_detectors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odrpc::Detector >*
      mutable_detectors();
  const ::odrpc::Detector& detectors(int index) const;
  ::odrpc::Detector* add_detectors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odrpc::Detector >&
      detectors() const;

  // @@protoc_insertion_point(class_scope:odrpc.GetDetectorsResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odrpc::Detector > detectors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Detector :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:odrpc.Detector) */ {
 public:
  Detector();
  virtual ~Detector();

  Detector(const Detector& from);
  Detector(Detector&& from) noexcept
    : Detector() {
    *this = ::std::move(from);
  }

  inline Detector& operator=(const Detector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detector& operator=(Detector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detector* internal_default_instance() {
    return reinterpret_cast<const Detector*>(
               &_Detector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Detector* other);
  friend void swap(Detector& a, Detector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detector* New() const final {
    return CreateMaybeMessage<Detector>(nullptr);
  }

  Detector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detector& from);
  void MergeFrom(const Detector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "odrpc.Detector";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string labels = 4;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 4;
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // string model = 3;
  void clear_model();
  static const int kModelFieldNumber = 3;
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);

  // int32 width = 5;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 height = 6;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 channels = 7;
  void clear_channels();
  static const int kChannelsFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:odrpc.Detector)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DetectRequest_DetectEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DetectRequest_DetectEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DetectRequest_DetectEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > SuperType;
  DetectRequest_DetectEntry_DoNotUse();
  DetectRequest_DetectEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DetectRequest_DetectEntry_DoNotUse& other);
  static const DetectRequest_DetectEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DetectRequest_DetectEntry_DoNotUse*>(&_DetectRequest_DetectEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "odrpc.DetectRequest.DetectEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class DetectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:odrpc.DetectRequest) */ {
 public:
  DetectRequest();
  virtual ~DetectRequest();

  DetectRequest(const DetectRequest& from);
  DetectRequest(DetectRequest&& from) noexcept
    : DetectRequest() {
    *this = ::std::move(from);
  }

  inline DetectRequest& operator=(const DetectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectRequest& operator=(DetectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectRequest* internal_default_instance() {
    return reinterpret_cast<const DetectRequest*>(
               &_DetectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DetectRequest* other);
  friend void swap(DetectRequest& a, DetectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectRequest* New() const final {
    return CreateMaybeMessage<DetectRequest>(nullptr);
  }

  DetectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectRequest& from);
  void MergeFrom(const DetectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "odrpc.DetectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, float> detect = 4;
  int detect_size() const;
  void clear_detect();
  static const int kDetectFieldNumber = 4;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      detect() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_detect();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string detector_name = 2;
  void clear_detector_name();
  static const int kDetectorNameFieldNumber = 2;
  const std::string& detector_name() const;
  void set_detector_name(const std::string& value);
  void set_detector_name(std::string&& value);
  void set_detector_name(const char* value);
  void set_detector_name(const char* value, size_t size);
  std::string* mutable_detector_name();
  std::string* release_detector_name();
  void set_allocated_detector_name(std::string* detector_name);

  // bytes data = 3 [(.gogoproto.jsontag) = "data", (.gogoproto.casttype) = "Raw"];
  void clear_data();
  static const int kDataFieldNumber = 3;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:odrpc.DetectRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DetectRequest_DetectEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
      0 > detect_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detector_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Detection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:odrpc.Detection) */ {
 public:
  Detection();
  virtual ~Detection();

  Detection(const Detection& from);
  Detection(Detection&& from) noexcept
    : Detection() {
    *this = ::std::move(from);
  }

  inline Detection& operator=(const Detection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detection& operator=(Detection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detection* internal_default_instance() {
    return reinterpret_cast<const Detection*>(
               &_Detection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Detection* other);
  friend void swap(Detection& a, Detection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection* New() const final {
    return CreateMaybeMessage<Detection>(nullptr);
  }

  Detection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detection& from);
  void MergeFrom(const Detection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "odrpc.Detection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string label = 5 [(.gogoproto.jsontag) = "label"];
  void clear_label();
  static const int kLabelFieldNumber = 5;
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);

  // float top = 1 [(.gogoproto.jsontag) = "top"];
  void clear_top();
  static const int kTopFieldNumber = 1;
  float top() const;
  void set_top(float value);

  // float left = 2 [(.gogoproto.jsontag) = "left"];
  void clear_left();
  static const int kLeftFieldNumber = 2;
  float left() const;
  void set_left(float value);

  // float bottom = 3 [(.gogoproto.jsontag) = "bottom"];
  void clear_bottom();
  static const int kBottomFieldNumber = 3;
  float bottom() const;
  void set_bottom(float value);

  // float right = 4 [(.gogoproto.jsontag) = "right"];
  void clear_right();
  static const int kRightFieldNumber = 4;
  float right() const;
  void set_right(float value);

  // float confidence = 6 [(.gogoproto.jsontag) = "confidence"];
  void clear_confidence();
  static const int kConfidenceFieldNumber = 6;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:odrpc.Detection)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  float top_;
  float left_;
  float bottom_;
  float right_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DetectResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:odrpc.DetectResponse) */ {
 public:
  DetectResponse();
  virtual ~DetectResponse();

  DetectResponse(const DetectResponse& from);
  DetectResponse(DetectResponse&& from) noexcept
    : DetectResponse() {
    *this = ::std::move(from);
  }

  inline DetectResponse& operator=(const DetectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectResponse& operator=(DetectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectResponse* internal_default_instance() {
    return reinterpret_cast<const DetectResponse*>(
               &_DetectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DetectResponse* other);
  friend void swap(DetectResponse& a, DetectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectResponse* New() const final {
    return CreateMaybeMessage<DetectResponse>(nullptr);
  }

  DetectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectResponse& from);
  void MergeFrom(const DetectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "odrpc.DetectResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .odrpc.Detection detections = 2;
  int detections_size() const;
  void clear_detections();
  static const int kDetectionsFieldNumber = 2;
  ::odrpc::Detection* mutable_detections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odrpc::Detection >*
      mutable_detections();
  const ::odrpc::Detection& detections(int index) const;
  ::odrpc::Detection* add_detections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odrpc::Detection >&
      detections() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string error = 3;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);

  // @@protoc_insertion_point(class_scope:odrpc.DetectResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odrpc::Detection > detections_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetDetectorsResponse

// repeated .odrpc.Detector detectors = 1;
inline int GetDetectorsResponse::detectors_size() const {
  return detectors_.size();
}
inline void GetDetectorsResponse::clear_detectors() {
  detectors_.Clear();
}
inline ::odrpc::Detector* GetDetectorsResponse::mutable_detectors(int index) {
  // @@protoc_insertion_point(field_mutable:odrpc.GetDetectorsResponse.detectors)
  return detectors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odrpc::Detector >*
GetDetectorsResponse::mutable_detectors() {
  // @@protoc_insertion_point(field_mutable_list:odrpc.GetDetectorsResponse.detectors)
  return &detectors_;
}
inline const ::odrpc::Detector& GetDetectorsResponse::detectors(int index) const {
  // @@protoc_insertion_point(field_get:odrpc.GetDetectorsResponse.detectors)
  return detectors_.Get(index);
}
inline ::odrpc::Detector* GetDetectorsResponse::add_detectors() {
  // @@protoc_insertion_point(field_add:odrpc.GetDetectorsResponse.detectors)
  return detectors_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odrpc::Detector >&
GetDetectorsResponse::detectors() const {
  // @@protoc_insertion_point(field_list:odrpc.GetDetectorsResponse.detectors)
  return detectors_;
}

// -------------------------------------------------------------------

// Detector

// string name = 1;
inline void Detector::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Detector::name() const {
  // @@protoc_insertion_point(field_get:odrpc.Detector.name)
  return name_.GetNoArena();
}
inline void Detector::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:odrpc.Detector.name)
}
inline void Detector::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:odrpc.Detector.name)
}
inline void Detector::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:odrpc.Detector.name)
}
inline void Detector::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:odrpc.Detector.name)
}
inline std::string* Detector::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:odrpc.Detector.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Detector::release_name() {
  // @@protoc_insertion_point(field_release:odrpc.Detector.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Detector::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:odrpc.Detector.name)
}

// string type = 2;
inline void Detector::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Detector::type() const {
  // @@protoc_insertion_point(field_get:odrpc.Detector.type)
  return type_.GetNoArena();
}
inline void Detector::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:odrpc.Detector.type)
}
inline void Detector::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:odrpc.Detector.type)
}
inline void Detector::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:odrpc.Detector.type)
}
inline void Detector::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:odrpc.Detector.type)
}
inline std::string* Detector::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:odrpc.Detector.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Detector::release_type() {
  // @@protoc_insertion_point(field_release:odrpc.Detector.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Detector::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:odrpc.Detector.type)
}

// string model = 3;
inline void Detector::clear_model() {
  model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Detector::model() const {
  // @@protoc_insertion_point(field_get:odrpc.Detector.model)
  return model_.GetNoArena();
}
inline void Detector::set_model(const std::string& value) {
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:odrpc.Detector.model)
}
inline void Detector::set_model(std::string&& value) {
  
  model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:odrpc.Detector.model)
}
inline void Detector::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:odrpc.Detector.model)
}
inline void Detector::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:odrpc.Detector.model)
}
inline std::string* Detector::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:odrpc.Detector.model)
  return model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Detector::release_model() {
  // @@protoc_insertion_point(field_release:odrpc.Detector.model)
  
  return model_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Detector::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:odrpc.Detector.model)
}

// repeated string labels = 4;
inline int Detector::labels_size() const {
  return labels_.size();
}
inline void Detector::clear_labels() {
  labels_.Clear();
}
inline const std::string& Detector::labels(int index) const {
  // @@protoc_insertion_point(field_get:odrpc.Detector.labels)
  return labels_.Get(index);
}
inline std::string* Detector::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:odrpc.Detector.labels)
  return labels_.Mutable(index);
}
inline void Detector::set_labels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:odrpc.Detector.labels)
  labels_.Mutable(index)->assign(value);
}
inline void Detector::set_labels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:odrpc.Detector.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
inline void Detector::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:odrpc.Detector.labels)
}
inline void Detector::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:odrpc.Detector.labels)
}
inline std::string* Detector::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:odrpc.Detector.labels)
  return labels_.Add();
}
inline void Detector::add_labels(const std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:odrpc.Detector.labels)
}
inline void Detector::add_labels(std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:odrpc.Detector.labels)
}
inline void Detector::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:odrpc.Detector.labels)
}
inline void Detector::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:odrpc.Detector.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Detector::labels() const {
  // @@protoc_insertion_point(field_list:odrpc.Detector.labels)
  return labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Detector::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:odrpc.Detector.labels)
  return &labels_;
}

// int32 width = 5;
inline void Detector::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Detector::width() const {
  // @@protoc_insertion_point(field_get:odrpc.Detector.width)
  return width_;
}
inline void Detector::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:odrpc.Detector.width)
}

// int32 height = 6;
inline void Detector::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Detector::height() const {
  // @@protoc_insertion_point(field_get:odrpc.Detector.height)
  return height_;
}
inline void Detector::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:odrpc.Detector.height)
}

// int32 channels = 7;
inline void Detector::clear_channels() {
  channels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Detector::channels() const {
  // @@protoc_insertion_point(field_get:odrpc.Detector.channels)
  return channels_;
}
inline void Detector::set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channels_ = value;
  // @@protoc_insertion_point(field_set:odrpc.Detector.channels)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DetectRequest

// string id = 1;
inline void DetectRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DetectRequest::id() const {
  // @@protoc_insertion_point(field_get:odrpc.DetectRequest.id)
  return id_.GetNoArena();
}
inline void DetectRequest::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:odrpc.DetectRequest.id)
}
inline void DetectRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:odrpc.DetectRequest.id)
}
inline void DetectRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:odrpc.DetectRequest.id)
}
inline void DetectRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:odrpc.DetectRequest.id)
}
inline std::string* DetectRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:odrpc.DetectRequest.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectRequest::release_id() {
  // @@protoc_insertion_point(field_release:odrpc.DetectRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:odrpc.DetectRequest.id)
}

// string detector_name = 2;
inline void DetectRequest::clear_detector_name() {
  detector_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DetectRequest::detector_name() const {
  // @@protoc_insertion_point(field_get:odrpc.DetectRequest.detector_name)
  return detector_name_.GetNoArena();
}
inline void DetectRequest::set_detector_name(const std::string& value) {
  
  detector_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:odrpc.DetectRequest.detector_name)
}
inline void DetectRequest::set_detector_name(std::string&& value) {
  
  detector_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:odrpc.DetectRequest.detector_name)
}
inline void DetectRequest::set_detector_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detector_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:odrpc.DetectRequest.detector_name)
}
inline void DetectRequest::set_detector_name(const char* value, size_t size) {
  
  detector_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:odrpc.DetectRequest.detector_name)
}
inline std::string* DetectRequest::mutable_detector_name() {
  
  // @@protoc_insertion_point(field_mutable:odrpc.DetectRequest.detector_name)
  return detector_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectRequest::release_detector_name() {
  // @@protoc_insertion_point(field_release:odrpc.DetectRequest.detector_name)
  
  return detector_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectRequest::set_allocated_detector_name(std::string* detector_name) {
  if (detector_name != nullptr) {
    
  } else {
    
  }
  detector_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detector_name);
  // @@protoc_insertion_point(field_set_allocated:odrpc.DetectRequest.detector_name)
}

// bytes data = 3 [(.gogoproto.jsontag) = "data", (.gogoproto.casttype) = "Raw"];
inline void DetectRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DetectRequest::data() const {
  // @@protoc_insertion_point(field_get:odrpc.DetectRequest.data)
  return data_.GetNoArena();
}
inline void DetectRequest::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:odrpc.DetectRequest.data)
}
inline void DetectRequest::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:odrpc.DetectRequest.data)
}
inline void DetectRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:odrpc.DetectRequest.data)
}
inline void DetectRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:odrpc.DetectRequest.data)
}
inline std::string* DetectRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:odrpc.DetectRequest.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectRequest::release_data() {
  // @@protoc_insertion_point(field_release:odrpc.DetectRequest.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:odrpc.DetectRequest.data)
}

// map<string, float> detect = 4;
inline int DetectRequest::detect_size() const {
  return detect_.size();
}
inline void DetectRequest::clear_detect() {
  detect_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
DetectRequest::detect() const {
  // @@protoc_insertion_point(field_map:odrpc.DetectRequest.detect)
  return detect_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
DetectRequest::mutable_detect() {
  // @@protoc_insertion_point(field_mutable_map:odrpc.DetectRequest.detect)
  return detect_.MutableMap();
}

// -------------------------------------------------------------------

// Detection

// float top = 1 [(.gogoproto.jsontag) = "top"];
inline void Detection::clear_top() {
  top_ = 0;
}
inline float Detection::top() const {
  // @@protoc_insertion_point(field_get:odrpc.Detection.top)
  return top_;
}
inline void Detection::set_top(float value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:odrpc.Detection.top)
}

// float left = 2 [(.gogoproto.jsontag) = "left"];
inline void Detection::clear_left() {
  left_ = 0;
}
inline float Detection::left() const {
  // @@protoc_insertion_point(field_get:odrpc.Detection.left)
  return left_;
}
inline void Detection::set_left(float value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:odrpc.Detection.left)
}

// float bottom = 3 [(.gogoproto.jsontag) = "bottom"];
inline void Detection::clear_bottom() {
  bottom_ = 0;
}
inline float Detection::bottom() const {
  // @@protoc_insertion_point(field_get:odrpc.Detection.bottom)
  return bottom_;
}
inline void Detection::set_bottom(float value) {
  
  bottom_ = value;
  // @@protoc_insertion_point(field_set:odrpc.Detection.bottom)
}

// float right = 4 [(.gogoproto.jsontag) = "right"];
inline void Detection::clear_right() {
  right_ = 0;
}
inline float Detection::right() const {
  // @@protoc_insertion_point(field_get:odrpc.Detection.right)
  return right_;
}
inline void Detection::set_right(float value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:odrpc.Detection.right)
}

// string label = 5 [(.gogoproto.jsontag) = "label"];
inline void Detection::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Detection::label() const {
  // @@protoc_insertion_point(field_get:odrpc.Detection.label)
  return label_.GetNoArena();
}
inline void Detection::set_label(const std::string& value) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:odrpc.Detection.label)
}
inline void Detection::set_label(std::string&& value) {
  
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:odrpc.Detection.label)
}
inline void Detection::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:odrpc.Detection.label)
}
inline void Detection::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:odrpc.Detection.label)
}
inline std::string* Detection::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:odrpc.Detection.label)
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Detection::release_label() {
  // @@protoc_insertion_point(field_release:odrpc.Detection.label)
  
  return label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Detection::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:odrpc.Detection.label)
}

// float confidence = 6 [(.gogoproto.jsontag) = "confidence"];
inline void Detection::clear_confidence() {
  confidence_ = 0;
}
inline float Detection::confidence() const {
  // @@protoc_insertion_point(field_get:odrpc.Detection.confidence)
  return confidence_;
}
inline void Detection::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:odrpc.Detection.confidence)
}

// -------------------------------------------------------------------

// DetectResponse

// string id = 1;
inline void DetectResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DetectResponse::id() const {
  // @@protoc_insertion_point(field_get:odrpc.DetectResponse.id)
  return id_.GetNoArena();
}
inline void DetectResponse::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:odrpc.DetectResponse.id)
}
inline void DetectResponse::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:odrpc.DetectResponse.id)
}
inline void DetectResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:odrpc.DetectResponse.id)
}
inline void DetectResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:odrpc.DetectResponse.id)
}
inline std::string* DetectResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:odrpc.DetectResponse.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectResponse::release_id() {
  // @@protoc_insertion_point(field_release:odrpc.DetectResponse.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:odrpc.DetectResponse.id)
}

// repeated .odrpc.Detection detections = 2;
inline int DetectResponse::detections_size() const {
  return detections_.size();
}
inline void DetectResponse::clear_detections() {
  detections_.Clear();
}
inline ::odrpc::Detection* DetectResponse::mutable_detections(int index) {
  // @@protoc_insertion_point(field_mutable:odrpc.DetectResponse.detections)
  return detections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odrpc::Detection >*
DetectResponse::mutable_detections() {
  // @@protoc_insertion_point(field_mutable_list:odrpc.DetectResponse.detections)
  return &detections_;
}
inline const ::odrpc::Detection& DetectResponse::detections(int index) const {
  // @@protoc_insertion_point(field_get:odrpc.DetectResponse.detections)
  return detections_.Get(index);
}
inline ::odrpc::Detection* DetectResponse::add_detections() {
  // @@protoc_insertion_point(field_add:odrpc.DetectResponse.detections)
  return detections_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::odrpc::Detection >&
DetectResponse::detections() const {
  // @@protoc_insertion_point(field_list:odrpc.DetectResponse.detections)
  return detections_;
}

// string error = 3;
inline void DetectResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DetectResponse::error() const {
  // @@protoc_insertion_point(field_get:odrpc.DetectResponse.error)
  return error_.GetNoArena();
}
inline void DetectResponse::set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:odrpc.DetectResponse.error)
}
inline void DetectResponse::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:odrpc.DetectResponse.error)
}
inline void DetectResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:odrpc.DetectResponse.error)
}
inline void DetectResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:odrpc.DetectResponse.error)
}
inline std::string* DetectResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:odrpc.DetectResponse.error)
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectResponse::release_error() {
  // @@protoc_insertion_point(field_release:odrpc.DetectResponse.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:odrpc.DetectResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace odrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
