// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc.proto
#ifndef GRPC_rpc_2eproto__INCLUDED
#define GRPC_rpc_2eproto__INCLUDED

#include "rpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class Channel;
class CompletionQueue;
class ServerCompletionQueue;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc_impl

namespace grpc {
class ServerContext;
}  // namespace grpc

namespace odrpc {

class odrpc final {
 public:
  static constexpr char const* service_full_name() {
    return "odrpc.odrpc";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get Config
    virtual ::grpc::Status GetDetectors(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::odrpc::GetDetectorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::odrpc::GetDetectorsResponse>> AsyncGetDetectors(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::odrpc::GetDetectorsResponse>>(AsyncGetDetectorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::odrpc::GetDetectorsResponse>> PrepareAsyncGetDetectors(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::odrpc::GetDetectorsResponse>>(PrepareAsyncGetDetectorsRaw(context, request, cq));
    }
    // Process an request
    virtual ::grpc::Status Detect(::grpc::ClientContext* context, const ::odrpc::DetectRequest& request, ::odrpc::DetectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::odrpc::DetectResponse>> AsyncDetect(::grpc::ClientContext* context, const ::odrpc::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::odrpc::DetectResponse>>(AsyncDetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::odrpc::DetectResponse>> PrepareAsyncDetect(::grpc::ClientContext* context, const ::odrpc::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::odrpc::DetectResponse>>(PrepareAsyncDetectRaw(context, request, cq));
    }
    // Process stream requests
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::odrpc::DetectRequest, ::odrpc::DetectResponse>> DetectStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::odrpc::DetectRequest, ::odrpc::DetectResponse>>(DetectStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::odrpc::DetectRequest, ::odrpc::DetectResponse>> AsyncDetectStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::odrpc::DetectRequest, ::odrpc::DetectResponse>>(AsyncDetectStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::odrpc::DetectRequest, ::odrpc::DetectResponse>> PrepareAsyncDetectStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::odrpc::DetectRequest, ::odrpc::DetectResponse>>(PrepareAsyncDetectStreamRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Get Config
      virtual void GetDetectors(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::odrpc::GetDetectorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDetectors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::odrpc::GetDetectorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDetectors(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::odrpc::GetDetectorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetDetectors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::odrpc::GetDetectorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Process an request
      virtual void Detect(::grpc::ClientContext* context, const ::odrpc::DetectRequest* request, ::odrpc::DetectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::odrpc::DetectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Detect(::grpc::ClientContext* context, const ::odrpc::DetectRequest* request, ::odrpc::DetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::odrpc::DetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Process stream requests
      virtual void DetectStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::odrpc::DetectRequest,::odrpc::DetectResponse>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::odrpc::GetDetectorsResponse>* AsyncGetDetectorsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::odrpc::GetDetectorsResponse>* PrepareAsyncGetDetectorsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::odrpc::DetectResponse>* AsyncDetectRaw(::grpc::ClientContext* context, const ::odrpc::DetectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::odrpc::DetectResponse>* PrepareAsyncDetectRaw(::grpc::ClientContext* context, const ::odrpc::DetectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::odrpc::DetectRequest, ::odrpc::DetectResponse>* DetectStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::odrpc::DetectRequest, ::odrpc::DetectResponse>* AsyncDetectStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::odrpc::DetectRequest, ::odrpc::DetectResponse>* PrepareAsyncDetectStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetDetectors(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::odrpc::GetDetectorsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::odrpc::GetDetectorsResponse>> AsyncGetDetectors(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::odrpc::GetDetectorsResponse>>(AsyncGetDetectorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::odrpc::GetDetectorsResponse>> PrepareAsyncGetDetectors(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::odrpc::GetDetectorsResponse>>(PrepareAsyncGetDetectorsRaw(context, request, cq));
    }
    ::grpc::Status Detect(::grpc::ClientContext* context, const ::odrpc::DetectRequest& request, ::odrpc::DetectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::odrpc::DetectResponse>> AsyncDetect(::grpc::ClientContext* context, const ::odrpc::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::odrpc::DetectResponse>>(AsyncDetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::odrpc::DetectResponse>> PrepareAsyncDetect(::grpc::ClientContext* context, const ::odrpc::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::odrpc::DetectResponse>>(PrepareAsyncDetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::odrpc::DetectRequest, ::odrpc::DetectResponse>> DetectStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::odrpc::DetectRequest, ::odrpc::DetectResponse>>(DetectStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::odrpc::DetectRequest, ::odrpc::DetectResponse>> AsyncDetectStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::odrpc::DetectRequest, ::odrpc::DetectResponse>>(AsyncDetectStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::odrpc::DetectRequest, ::odrpc::DetectResponse>> PrepareAsyncDetectStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::odrpc::DetectRequest, ::odrpc::DetectResponse>>(PrepareAsyncDetectStreamRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetDetectors(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::odrpc::GetDetectorsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDetectors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::odrpc::GetDetectorsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDetectors(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::odrpc::GetDetectorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetDetectors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::odrpc::GetDetectorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Detect(::grpc::ClientContext* context, const ::odrpc::DetectRequest* request, ::odrpc::DetectResponse* response, std::function<void(::grpc::Status)>) override;
      void Detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::odrpc::DetectResponse* response, std::function<void(::grpc::Status)>) override;
      void Detect(::grpc::ClientContext* context, const ::odrpc::DetectRequest* request, ::odrpc::DetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::odrpc::DetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DetectStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::odrpc::DetectRequest,::odrpc::DetectResponse>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::odrpc::GetDetectorsResponse>* AsyncGetDetectorsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::odrpc::GetDetectorsResponse>* PrepareAsyncGetDetectorsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::odrpc::DetectResponse>* AsyncDetectRaw(::grpc::ClientContext* context, const ::odrpc::DetectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::odrpc::DetectResponse>* PrepareAsyncDetectRaw(::grpc::ClientContext* context, const ::odrpc::DetectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::odrpc::DetectRequest, ::odrpc::DetectResponse>* DetectStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::odrpc::DetectRequest, ::odrpc::DetectResponse>* AsyncDetectStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::odrpc::DetectRequest, ::odrpc::DetectResponse>* PrepareAsyncDetectStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetDetectors_;
    const ::grpc::internal::RpcMethod rpcmethod_Detect_;
    const ::grpc::internal::RpcMethod rpcmethod_DetectStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get Config
    virtual ::grpc::Status GetDetectors(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::odrpc::GetDetectorsResponse* response);
    // Process an request
    virtual ::grpc::Status Detect(::grpc::ServerContext* context, const ::odrpc::DetectRequest* request, ::odrpc::DetectResponse* response);
    // Process stream requests
    virtual ::grpc::Status DetectStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::odrpc::DetectResponse, ::odrpc::DetectRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDetectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDetectors() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetDetectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDetectors(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::odrpc::GetDetectorsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDetectors(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::odrpc::GetDetectorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Detect() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* context, const ::odrpc::DetectRequest* request, ::odrpc::DetectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetect(::grpc::ServerContext* context, ::odrpc::DetectRequest* request, ::grpc::ServerAsyncResponseWriter< ::odrpc::DetectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DetectStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DetectStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DetectStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::odrpc::DetectResponse, ::odrpc::DetectRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::odrpc::DetectResponse, ::odrpc::DetectRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetDetectors<WithAsyncMethod_Detect<WithAsyncMethod_DetectStream<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDetectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetDetectors() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::odrpc::GetDetectorsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::google::protobuf::Empty* request,
                 ::odrpc::GetDetectorsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetDetectors(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetDetectors(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::odrpc::GetDetectorsResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::odrpc::GetDetectorsResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDetectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDetectors(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::odrpc::GetDetectorsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetDetectors(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::odrpc::GetDetectorsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Detect() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::odrpc::DetectRequest, ::odrpc::DetectResponse>(
          [this](::grpc::ServerContext* context,
                 const ::odrpc::DetectRequest* request,
                 ::odrpc::DetectResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Detect(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Detect(
        ::grpc::experimental::MessageAllocator< ::odrpc::DetectRequest, ::odrpc::DetectResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::odrpc::DetectRequest, ::odrpc::DetectResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* context, const ::odrpc::DetectRequest* request, ::odrpc::DetectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Detect(::grpc::ServerContext* context, const ::odrpc::DetectRequest* request, ::odrpc::DetectResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DetectStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DetectStream() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackBidiHandler< ::odrpc::DetectRequest, ::odrpc::DetectResponse>(
          [this] { return this->DetectStream(); }));
    }
    ~ExperimentalWithCallbackMethod_DetectStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::odrpc::DetectResponse, ::odrpc::DetectRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::odrpc::DetectRequest, ::odrpc::DetectResponse>* DetectStream() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::odrpc::DetectRequest, ::odrpc::DetectResponse>;}
  };
  typedef ExperimentalWithCallbackMethod_GetDetectors<ExperimentalWithCallbackMethod_Detect<ExperimentalWithCallbackMethod_DetectStream<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetDetectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDetectors() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetDetectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDetectors(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::odrpc::GetDetectorsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Detect() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* context, const ::odrpc::DetectRequest* request, ::odrpc::DetectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DetectStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DetectStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DetectStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::odrpc::DetectResponse, ::odrpc::DetectRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDetectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetDetectors() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetDetectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDetectors(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::odrpc::GetDetectorsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDetectors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Detect() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* context, const ::odrpc::DetectRequest* request, ::odrpc::DetectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DetectStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DetectStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DetectStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::odrpc::DetectResponse, ::odrpc::DetectRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDetectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDetectors() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetDetectors(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDetectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDetectors(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::odrpc::GetDetectorsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetDetectors(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Detect() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Detect(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* context, const ::odrpc::DetectRequest* request, ::odrpc::DetectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Detect(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DetectStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DetectStream() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->DetectStream(); }));
    }
    ~ExperimentalWithRawCallbackMethod_DetectStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::odrpc::DetectResponse, ::odrpc::DetectRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* DetectStream() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDetectors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetDetectors() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::odrpc::GetDetectorsResponse>(std::bind(&WithStreamedUnaryMethod_GetDetectors<BaseClass>::StreamedGetDetectors, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDetectors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDetectors(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::odrpc::GetDetectorsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDetectors(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::odrpc::GetDetectorsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Detect() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::odrpc::DetectRequest, ::odrpc::DetectResponse>(std::bind(&WithStreamedUnaryMethod_Detect<BaseClass>::StreamedDetect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Detect(::grpc::ServerContext* context, const ::odrpc::DetectRequest* request, ::odrpc::DetectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDetect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::odrpc::DetectRequest,::odrpc::DetectResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetDetectors<WithStreamedUnaryMethod_Detect<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetDetectors<WithStreamedUnaryMethod_Detect<Service > > StreamedService;
};

}  // namespace odrpc


#endif  // GRPC_rpc_2eproto__INCLUDED
