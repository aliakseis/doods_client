// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc.proto

#include "rpc.pb.h"
#include "rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace odrpc {

static const char* odrpc_method_names[] = {
  "/odrpc.odrpc/GetDetectors",
  "/odrpc.odrpc/Detect",
  "/odrpc.odrpc/DetectStream",
};

std::unique_ptr< odrpc::Stub> odrpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< odrpc::Stub> stub(new odrpc::Stub(channel));
  return stub;
}

odrpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetDetectors_(odrpc_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Detect_(odrpc_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DetectStream_(odrpc_method_names[2], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status odrpc::Stub::GetDetectors(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::odrpc::GetDetectorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDetectors_, context, request, response);
}

void odrpc::Stub::experimental_async::GetDetectors(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::odrpc::GetDetectorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDetectors_, context, request, response, std::move(f));
}

void odrpc::Stub::experimental_async::GetDetectors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::odrpc::GetDetectorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDetectors_, context, request, response, std::move(f));
}

void odrpc::Stub::experimental_async::GetDetectors(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::odrpc::GetDetectorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDetectors_, context, request, response, reactor);
}

void odrpc::Stub::experimental_async::GetDetectors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::odrpc::GetDetectorsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDetectors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::odrpc::GetDetectorsResponse>* odrpc::Stub::AsyncGetDetectorsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::odrpc::GetDetectorsResponse>::Create(channel_.get(), cq, rpcmethod_GetDetectors_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::odrpc::GetDetectorsResponse>* odrpc::Stub::PrepareAsyncGetDetectorsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::odrpc::GetDetectorsResponse>::Create(channel_.get(), cq, rpcmethod_GetDetectors_, context, request, false);
}

::grpc::Status odrpc::Stub::Detect(::grpc::ClientContext* context, const ::odrpc::DetectRequest& request, ::odrpc::DetectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Detect_, context, request, response);
}

void odrpc::Stub::experimental_async::Detect(::grpc::ClientContext* context, const ::odrpc::DetectRequest* request, ::odrpc::DetectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Detect_, context, request, response, std::move(f));
}

void odrpc::Stub::experimental_async::Detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::odrpc::DetectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Detect_, context, request, response, std::move(f));
}

void odrpc::Stub::experimental_async::Detect(::grpc::ClientContext* context, const ::odrpc::DetectRequest* request, ::odrpc::DetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Detect_, context, request, response, reactor);
}

void odrpc::Stub::experimental_async::Detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::odrpc::DetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Detect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::odrpc::DetectResponse>* odrpc::Stub::AsyncDetectRaw(::grpc::ClientContext* context, const ::odrpc::DetectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::odrpc::DetectResponse>::Create(channel_.get(), cq, rpcmethod_Detect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::odrpc::DetectResponse>* odrpc::Stub::PrepareAsyncDetectRaw(::grpc::ClientContext* context, const ::odrpc::DetectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::odrpc::DetectResponse>::Create(channel_.get(), cq, rpcmethod_Detect_, context, request, false);
}

::grpc::ClientReaderWriter< ::odrpc::DetectRequest, ::odrpc::DetectResponse>* odrpc::Stub::DetectStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::odrpc::DetectRequest, ::odrpc::DetectResponse>::Create(channel_.get(), rpcmethod_DetectStream_, context);
}

void odrpc::Stub::experimental_async::DetectStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::odrpc::DetectRequest,::odrpc::DetectResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::odrpc::DetectRequest,::odrpc::DetectResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_DetectStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::odrpc::DetectRequest, ::odrpc::DetectResponse>* odrpc::Stub::AsyncDetectStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::odrpc::DetectRequest, ::odrpc::DetectResponse>::Create(channel_.get(), cq, rpcmethod_DetectStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::odrpc::DetectRequest, ::odrpc::DetectResponse>* odrpc::Stub::PrepareAsyncDetectStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::odrpc::DetectRequest, ::odrpc::DetectResponse>::Create(channel_.get(), cq, rpcmethod_DetectStream_, context, false, nullptr);
}

odrpc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      odrpc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< odrpc::Service, ::google::protobuf::Empty, ::odrpc::GetDetectorsResponse>(
          std::mem_fn(&odrpc::Service::GetDetectors), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      odrpc_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< odrpc::Service, ::odrpc::DetectRequest, ::odrpc::DetectResponse>(
          std::mem_fn(&odrpc::Service::Detect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      odrpc_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< odrpc::Service, ::odrpc::DetectRequest, ::odrpc::DetectResponse>(
          std::mem_fn(&odrpc::Service::DetectStream), this)));
}

odrpc::Service::~Service() {
}

::grpc::Status odrpc::Service::GetDetectors(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::odrpc::GetDetectorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status odrpc::Service::Detect(::grpc::ServerContext* context, const ::odrpc::DetectRequest* request, ::odrpc::DetectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status odrpc::Service::DetectStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::odrpc::DetectResponse, ::odrpc::DetectRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace odrpc

